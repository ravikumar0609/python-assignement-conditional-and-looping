
4.Write a program to implement an algorithm which will accept a string of characters and should find the highest occurrence of the character and display it.

s1="aaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccdeeefffgfg
high=0
key=""
count=1
i=0
while i<len(s1):
  for j in range(1,len(s1)):
    if s1[i]==s1[j]:
      count=count+1
    else:
      if count>high:
        high=count
        key=s1[i]
      count=0
  i=i+1
print(key,high)

*************************************************Additional**********************
s1="my name is ravi kumar a mvvv "
s1=s1.replace(" ","")
s1=list(s1)
s1.sort()
temp=0
high=0
key=[]
count=1
i=0
while i<len(s1):
  for j in range(1,len(s1)):
    if s1[i]==s1[j]:
      count=count+1
    else:
      if count>=high:
        high=count
        if key!="" and s1[i] not in key:
          key.append(s1[i])
      count=0
  i=i+1
print(key,high)

6.Caesar's cipher shifts each letter by a number of letters. If the shift takes you past the end of the alphabet, just rotate back to the front of the alphabet. In the case of rotation by 3, w, x, y, and z would map to z, a, b and c.
For example, if the string is: "welcome" and the shift is 4 the output will be "aipgtqi"

inputstring="welcome"
list1=[]
index=0
outputstring=""
for char in inputstring:
  index=ord(char)+4
  if(index>122):
    list1.append(chr(index-26))
  else:
    list1.append(chr(index))
outputstring=outputstring.join(list1)
print("output string after shifts by 4 is",outputstring)

10.Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. Add all such elements into the list and print the list.

outputlist= []
for value in range(1000,3001):
  temp=value
  while temp > 0:
    if temp % 2 == 0:
      temp = temp// 10
    else:
      break
  else:
    outputlist.append(value)
print(outputlist)


9.Given a list of N integers. The task is to eliminate the minimum number of elements such that in the resulting list the sum of any two adjacent values is even.
numbers = [1, 3, 5, 4, 2]
output = [1, 3, 5] Total elements removed 2

number=[1,3,5,4,2]
output=[]
temp=0
j=0
i=0
while i<len(number)-1:
  temp=number[i]+number[i+1]
  print(temp,"temp")
  if(temp%2==0) and number[i] not in output :
    print(number[i])
    print(number[i+1])
    output.append(number[i])
  else:
    output.append(number[i])
    break
  i=i+1
print(output)

*****************different input**************************
number=[1,3,5,7,2]
output=[]
temp=0
j=0
i=0
while i<len(number)-1:
  temp=number[i]+number[i+1]
  print(temp,"temp")
  if(temp%2==0) and number[i] not in output :
    print(number[i])
    print(number[i+1])
    output.append(number[i])
  else:
    output.append(number[i])
    break
  i=i+1
print(output)


7.Write a program to find all pairs in a list of Integers Whose sum is equal to a given Number.
For example nums = [1,2,3,4,5] sum = 7 
expected output is ans = [(3,4),(2,5),(4,3),(5,2)]

number1=[1,2,3,4,5]
finalresult=[]
for i in range(0,len(number1)):
  for j in range(1,len(number1)):
    temp=number[i]+number[j]
    if(temp==7):
      finalresult.append((number[i],number[j]))
print(finalresult)

3.Given 3 strings: first, second, and third. Third String is said to be a shuffle of first and second if it can be formed by interleaving the characters of first and second String in a way that maintains the left to right ordering of the characters from each string.

For example, given first = "abc" and second = "def", third = "dabecf" is a valid shuffle since it preserves the character ordering of the two strings.
Given these 3 strings write a program that detects whether the third String is a valid shuffle of first and second String.

first="abc"
second="def"
third="dabecf"
thirdindex=0
temp=[]
final=" "
while thirdindex<len(c):
  for firstindex in range(0,len(first)):
    for secondindex in range(0,len(second)):
      if(third[thirdindex]==first[firstindex]) and second[secondindex] in temp and first[firstindex] in temp:
        temp.append(first[firstindex])
      elif(third[thirdindex]==second[secondindex]) and first[firstindex] in temp and second[secondindex] in temp:
        temp.append(second[secondindex])
  temp.append(third[thirdindex])
  thirdindex=thirdindex+1
final=final.join(temp)
final=final.replace(" ","")
if(third==final):
  print("third string is a valid suffle of first and second string")
else:
  print("third string is not a valid suffle of first and second")
         ******************* changed with third string********************
first="abc"
second="def"
third="dacfeb"
thirdindex=0
temp=[]
final=" "
while thirdindex<len(c):
  for firstindex in range(0,len(first)):
    for secondindex in range(0,len(second)):
      if(third[thirdindex]==first[firstindex]) and second[secondindex] in temp and first[firstindex] in temp:
        temp.append(first[firstindex])
      elif(third[thirdindex]==second[secondindex]) and first[firstindex] in temp and second[secondindex] in temp:
        temp.append(second[secondindex])
  temp.append(third[thirdindex])
  thirdindex=thirdindex+1
final=final.join(temp)
final=final.replace(" ","")
print(final)
if(third==final):
  print("third string is a valid suffle of first and second string")
else:
  print("third string is not a valid suffle of first and second")
         
1.Write a program to print duplicate characters from String.
Input : "Programming"
Output: "r", "m", "g"
finalletter=[]
inputstring="programming"
for char in inputstring:
    if inputstring.count(char)>=2 and char not in finalletter:
        finalletter.append(i) 
        print(finalletter)

2.Write a program to check if two given strings are an anagram of each other or not.
Anagram Strings: Two strings are anagrams if they are written using the exact letters, ignoring space, punctuation, and capitalization.
For example : Input: "Army" and "Mary" Output "Strings are anagrams of each other"

firststring=”m!a@r$y#@@@@"
firststring=list(firststring)
final=[]
secondstring=”army”
secondstring=list(secondstring)
for char in firststring:
    if char.isalpha():
        final.append(char)
if firststring.sort()==secondstring.sort():
    print("both strings are anagram")
else: 
    print("strings are not anagram")
